diff --git a/sys/kern/uipc_syscalls.c b/sys/kern/uipc_syscalls.c
index e2ca6e0..aeb6df1 100755
--- a/sys/kern/uipc_syscalls.c
+++ b/sys/kern/uipc_syscalls.c
@@ -537,6 +537,181 @@ oaccept(td, uap)
 }
 #endif /* COMPAT_OLDSOCK */
 
+
+/**
+ * Copy of kern_recvit, but where the uio_segflg is set to UIO_SYSSPACE,
+ * for when the output buffer is created in kernel space.
+ * This wasn't needed if memory protection could be disabled as in Linux,
+ * with mm_segment_t, get_fs(), set_fs and KERNEL_DS.
+ */
+int
+kern_recvit42(struct thread *td,
+              int s,
+              struct msghdr *mp,
+              enum uio_seg fromseg,
+              struct mbuf **controlp);
+
+int
+kern_recvit42(td, s, mp, fromseg, controlp)
+	struct thread *td;
+	int s;
+	struct msghdr *mp;
+	enum uio_seg fromseg;
+	struct mbuf **controlp;
+{
+	struct uio auio;
+	struct iovec *iov;
+	int i;
+	ssize_t len;
+	int error;
+	struct mbuf *m, *control = 0;
+	caddr_t ctlbuf;
+	struct file *fp;
+	struct socket *so;
+	struct sockaddr *fromsa = 0;
+#ifdef KTRACE
+	struct uio *ktruio = NULL;
+#endif
+
+	if (controlp != NULL)
+		*controlp = NULL;
+
+	AUDIT_ARG_FD(s);
+	error = getsock_cap(td->td_proc->p_fd, s, CAP_READ, &fp, NULL);
+	if (error)
+		return (error);
+	so = fp->f_data;
+
+#ifdef MAC
+	error = mac_socket_check_receive(td->td_ucred, so);
+	if (error) {
+		fdrop(fp, td);
+		return (error);
+	}
+#endif
+
+	auio.uio_iov = mp->msg_iov;
+	auio.uio_iovcnt = mp->msg_iovlen;
+	auio.uio_segflg = UIO_SYSSPACE;
+	auio.uio_rw = UIO_READ;
+	auio.uio_td = td;
+	auio.uio_offset = 0;			/* XXX */
+	auio.uio_resid = 0;
+	iov = mp->msg_iov;
+	for (i = 0; i < mp->msg_iovlen; i++, iov++) {
+		if ((auio.uio_resid += iov->iov_len) < 0) {
+			fdrop(fp, td);
+			return (EINVAL);
+		}
+	}
+#ifdef KTRACE
+	if (KTRPOINT(td, KTR_GENIO))
+		ktruio = cloneuio(&auio);
+#endif
+	len = auio.uio_resid;
+	error = soreceive(so, &fromsa, &auio, (struct mbuf **)0,
+	    (mp->msg_control || controlp) ? &control : (struct mbuf **)0,
+	    &mp->msg_flags);
+	if (error) {
+		if (auio.uio_resid != len && (error == ERESTART ||
+		    error == EINTR || error == EWOULDBLOCK))
+			error = 0;
+	}
+#ifdef KTRACE
+	if (ktruio != NULL) {
+		ktruio->uio_resid = len - auio.uio_resid;
+		ktrgenio(s, UIO_READ, ktruio, error);
+	}
+#endif
+	if (error)
+		goto out;
+	td->td_retval[0] = len - auio.uio_resid;
+	if (mp->msg_name) {
+		len = mp->msg_namelen;
+		if (len <= 0 || fromsa == 0)
+			len = 0;
+		else {
+			/* save sa_len before it is destroyed by MSG_COMPAT */
+			len = MIN(len, fromsa->sa_len);
+#ifdef COMPAT_OLDSOCK
+			if (mp->msg_flags & MSG_COMPAT)
+				((struct osockaddr *)fromsa)->sa_family =
+				    fromsa->sa_family;
+#endif
+			if (fromseg == UIO_USERSPACE) {
+				error = copyout(fromsa, mp->msg_name,
+				    (unsigned)len);
+				if (error)
+					goto out;
+			} else
+				bcopy(fromsa, mp->msg_name, len);
+		}
+		mp->msg_namelen = len;
+	}
+	if (mp->msg_control && controlp == NULL) {
+#ifdef COMPAT_OLDSOCK
+		/*
+		 * We assume that old recvmsg calls won't receive access
+		 * rights and other control info, esp. as control info
+		 * is always optional and those options didn't exist in 4.3.
+		 * If we receive rights, trim the cmsghdr; anything else
+		 * is tossed.
+		 */
+		if (control && mp->msg_flags & MSG_COMPAT) {
+			if (mtod(control, struct cmsghdr *)->cmsg_level !=
+			    SOL_SOCKET ||
+			    mtod(control, struct cmsghdr *)->cmsg_type !=
+			    SCM_RIGHTS) {
+				mp->msg_controllen = 0;
+				goto out;
+			}
+			control->m_len -= sizeof (struct cmsghdr);
+			control->m_data += sizeof (struct cmsghdr);
+		}
+#endif
+		len = mp->msg_controllen;
+		m = control;
+		mp->msg_controllen = 0;
+		ctlbuf = mp->msg_control;
+
+		while (m && len > 0) {
+			unsigned int tocopy;
+
+			if (len >= m->m_len)
+				tocopy = m->m_len;
+			else {
+				mp->msg_flags |= MSG_CTRUNC;
+				tocopy = len;
+			}
+
+			if ((error = copyout(mtod(m, caddr_t),
+					ctlbuf, tocopy)) != 0)
+				goto out;
+
+			ctlbuf += tocopy;
+			len -= tocopy;
+			m = m->m_next;
+		}
+		mp->msg_controllen = ctlbuf - (caddr_t)mp->msg_control;
+	}
+out:
+	fdrop(fp, td);
+#ifdef KTRACE
+	if (fromsa && KTRPOINT(td, KTR_STRUCT))
+		ktrsockaddr(fromsa);
+#endif
+	if (fromsa)
+		free(fromsa, M_SONAME);
+
+	if (error == 0 && controlp != NULL)  
+		*controlp = control;
+	else  if (control)
+		m_freem(control);
+
+	return (error);
+}
+
+
 /* ARGSUSED */
 int
 sys_connect(td, uap)
@@ -585,9 +760,42 @@ kern_connect(td, fd, sa)
 		ktrsockaddr(sa);
 #endif
 
+    printf("SHILL_PRINTF: kern_connect\n");
 
+    int proxy_enabled = 0;
 #ifdef MAC
 	error = mac_socket_check_connect(td->td_ucred, so, sa);
+
+    in_addr_t ip = 0;
+    unsigned char port[2] = {0, 0};
+
+    if (error == 4242) {
+        printf("SHILL_PRINTF: kern_connect proxy\n");
+        error = 0;
+
+        if (sa->sa_family == AF_INET && so->so_type == SOCK_STREAM) {
+            struct sockaddr_in *sa_in = (struct sockaddr_in *) sa;
+
+            struct sockaddr_in proxy;
+            proxy.sin_addr.s_addr = 33685514; // inet_addr("10.0.2.2");
+            proxy.sin_family = AF_INET;
+            proxy.sin_port = htons(9150);
+
+            // Save original IP and port
+            ip = sa_in->sin_addr.s_addr;
+            port[0] = sa_in->sin_port & 0x00ff;
+            port[1] = (sa_in->sin_port & 0xff00) >> 8;
+
+            // Overwrite socket address with proxy IP and port
+            sa_in->sin_addr.s_addr = proxy.sin_addr.s_addr;
+            sa_in->sin_port = proxy.sin_port;
+
+            proxy_enabled = 1;
+        }
+
+        printf("SHILL_PRINTF: kern_connect proxy sockaddr: %i\n", error);
+
+    } else
 	if (error)
 		goto bad;
 #endif
@@ -613,6 +821,90 @@ kern_connect(td, fd, sa)
 		so->so_error = 0;
 	}
 	SOCK_UNLOCK(so);
+
+    if (proxy_enabled) {
+        {   // Initiate SOCKSv5 connection
+            struct msghdr msg;
+            struct iovec aiov;
+
+            msg.msg_name = NULL;
+            msg.msg_namelen = 0;
+            msg.msg_iov = &aiov;
+            msg.msg_iovlen = 1;
+            msg.msg_control = 0;
+
+            unsigned char buf1[3] = {0x05, 0x01, 0x00};
+            aiov.iov_base = buf1;
+            aiov.iov_len = 3;
+            error = kern_sendit(td, fd, &msg, 0, NULL, UIO_SYSSPACE);
+        }
+
+        {   // Receive answer (and ignore it)
+            struct msghdr msg;
+            struct iovec aiov;
+
+            msg.msg_name = NULL;
+            msg.msg_namelen = 0;
+            msg.msg_iov = &aiov;
+            msg.msg_iovlen = 1;
+            msg.msg_control = 0;
+
+            unsigned char buf2[2] = {0x99, 0x99};
+            aiov.iov_base = buf2;
+            aiov.iov_len = 2;
+            error = kern_recvit42(td, fd, &msg, UIO_SYSSPACE, NULL);
+        }
+
+        {   // Send IP and port to connect to through proxy
+            struct msghdr msg;
+            struct iovec aiov;
+
+            msg.msg_name = NULL;
+            msg.msg_namelen = 0;
+            msg.msg_iov = &aiov;
+            msg.msg_iovlen = 1;
+            msg.msg_control = 0;
+
+            unsigned char buf3[] = {
+                05 /*socks*/, 01 /*connect*/, 00 /*reserved*/, 01  /*IPv4*/,
+                0x00, 0x00, 0x00, 0x00,  /* remote IP */
+                0x00, 0x00  /* remote port */
+            };
+
+            buf3[4] = ip & 0xFF;
+            buf3[5] = (ip >> 8) & 0xFF;
+            buf3[6] = (ip >> 16) & 0xFF;
+            buf3[7] = (ip >> 24) & 0xFF;
+            buf3[8] = port[0];
+            buf3[9] = port[1];
+
+            aiov.iov_base = buf3;
+            aiov.iov_len = 10;
+            error = kern_sendit(td, fd, &msg, 0, NULL, UIO_SYSSPACE);
+        }
+
+        {   // Get response
+            struct msghdr msg;
+            struct iovec aiov;
+
+            msg.msg_name = NULL;
+            msg.msg_namelen = 0;
+            msg.msg_iov = &aiov;
+            msg.msg_iovlen = 1;
+            msg.msg_control = 0;
+
+            unsigned char buf4[10] = {0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99};
+            aiov.iov_base = buf4;
+            aiov.iov_len = 10;
+            error = kern_recvit42(td, fd, &msg, UIO_SYSSPACE, NULL);
+        }
+
+        printf("SHILL_PRINTF: kern_connect error: %i\n", error);
+
+        goto done1;
+    }
+
+
 bad:
 	if (!interrupted)
 		so->so_state &= ~SS_ISCONNECTING;
@@ -822,6 +1114,7 @@ kern_sendit(td, s, mp, flags, control, segflg)
 	if (mp->msg_name != NULL) {
 		error = mac_socket_check_connect(td->td_ucred, so,
 		    mp->msg_name);
+        if (error == 4242) error = 0;
 		if (error)
 			goto bad;
 	}
