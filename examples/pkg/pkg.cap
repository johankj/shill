#lang shill/cap

provide {
  pkg : {
    wallet : native-wallet/c,
    tcp : socket-factory/c(+address-family 2,
                           +transfer-family 1,
                           +permissions { +connect, +recv, +send, +poll, +bind, +accept, +listen }),
    udp : socket-factory/c(+address-family 2,
                           +transfer-family 2,
                           +permissions { +connect, +recv, +send, +poll },
                           +no-proxy),
    pkgconfigdirs : listof(dir/c(+create-file, +path, +contents, +read, +lookup with { +path, +read, +append, +write, +stat, +exec })),
    tmpdir : dir/c(+create-file, +path, +contents, +read, +lookup with { +path, +read, +append, +write, +stat }),
    # pkgexec : file/c(+read, +exec, +stat, +path, +write, +link, +unlink, +close, +append),
    readonly : listof(read-only/c)
  }
  +optional {
    stdin  : maybe/c(readable/c),
    stdout : maybe/c(writeable/c),
    stderr : maybe/c(writeable/c),
    timeout : timeout/c
  }
  -> integer?
};

require shill/contracts shill/native;

val pkg = fun (wallet, tcp, udp, pkgconfigdirs, tmpdir,
               # pkgexec,
               readonly, stdin = false, stdout = false, stderr = false, timeout = false) {
  val executable = pkg-native("pkg", wallet, "libpkg.so.3");

  val args = vector->list(current-command-line-arguments());
  val extra = list-append([tcp, udp, tmpdir
  # , pkgexec
  ], readonly, pkgconfigdirs);

  executable(args, timeout = timeout, stdin = stdin, stdout = stdout, stderr = stderr, extra = extra);
}
