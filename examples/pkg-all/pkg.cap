#lang shill/cap

provide {
  pkg : {
    wallet : native-wallet/c,
    tcp : socket-factory/c(+address-family 2,
                           +transfer-family 1,
                           +permissions { +connect, +recv, +send, +poll, +bind, +accept, +listen }),
    udp : socket-factory/c(+address-family 2,
                           +transfer-family 2,
                           +permissions { +connect, +recv, +send, +poll }),
    alldirs : dir/c(+path, +contents, +create-dir, +create-file, +add-link, +add-symlink, +read-symlink, +unlink-file, +unlink-symlink, +unlink-dir, +lookup, +link, +read, +write, +append, +exec, +stat, +close, +chroot, +chdir, +chflags, +chmod, +chown, +chtimes, +unlink, +rename)
  }
  +optional {
    stdin  : maybe/c(readable/c),
    stdout : maybe/c(writeable/c),
    stderr : maybe/c(writeable/c),
    timeout : timeout/c
  }
  -> integer?
};

require shill/contracts shill/native;

val pkg = fun (wallet, tcp, udp, alldirs, stdin = false, stdout = false, stderr = false, timeout = false) {
  val executable = pkg-native("pkg", wallet, "libpkg.so.3");

  val args = vector->list(current-command-line-arguments());
  val extra = [tcp, udp, alldirs];

  executable(args, timeout = timeout, stdin = stdin, stdout = stdout, stderr = stderr, extra = extra);
}
